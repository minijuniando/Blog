import { describe, it, expect, vi } from 'vitest';import { createArticle } from '../../../function/article/create-article';import { db } from '../../../db/client';vi.mock('../../../db/client', () => ({  db: {    user: {      findUnique: vi.fn(),    },    article: {      findUnique: vi.fn(),      create: vi.fn(),    },    tag: {      findMany: vi.fn(),    },    articleTags: {      createMany: vi.fn(),    },  },}));describe('createArticle', () => {  it('should create an article successfully without tags', async () => {    vi.mocked(db.user.findUnique).mockResolvedValue({ id: 'user-1', role: 'WRITER' });    vi.mocked(db.article.findUnique).mockResolvedValue(null);    vi.mocked(db.article.create).mockResolvedValue({ id: 'article-1', title: 'Test Article', content: 'Test Content', userId: 'user-1', photoUrl: 'url' });    vi.mocked(db.article.findUnique).mockResolvedValue({ id: 'article-1', title: 'Test Article', content: 'Test Content', userId: 'user-1', photoUrl: 'url', tags: [] });    const result = await createArticle({      title: 'Test Article',      content: 'Test Content',      userId: 'user-1',      photoUrl: 'url',    });    expect(result).toHaveProperty('id', 'article-1');  });  it('should return an error if user is not a WRITER', async () => {    vi.mocked(db.user.findUnique).mockResolvedValue({ id: 'user-1', role: 'READER' });    const result = await createArticle({      title: 'Test Article',      content: 'Test Content',      userId: 'user-1',      photoUrl: 'url',    });    expect(result).toEqual({      error: true,      status: 400,      message: 'O usuário precisa ser da função \'WRITER\' para escrever artigos',    });  });  it('should return an error if article title already exists', async () => {    vi.mocked(db.user.findUnique).mockResolvedValue({ id: 'user-1', role: 'WRITER' });    vi.mocked(db.article.findUnique).mockResolvedValue({ id: 'existing-article', title: 'Test Article', content: 'Existing Content', userId: 'user-2', photoUrl: 'url' });    const result = await createArticle({      title: 'Test Article',      content: 'Test Content',      userId: 'user-1',      photoUrl: 'url',    });    expect(result).toEqual({      error: true,      status: 400,      message: 'O artigo com o titulo: Test Article já existe',    });  });  it('should return an error if some tags are not found', async () => {    vi.mocked(db.user.findUnique).mockResolvedValue({ id: 'user-1', role: 'WRITER' });    vi.mocked(db.article.findUnique).mockResolvedValue(null);    vi.mocked(db.tag.findMany).mockResolvedValue([{ id: 'tag-1', name: 'Tag 1' }]);    const result = await createArticle({      title: 'Test Article',      content: 'Test Content',      userId: 'user-1',      photoUrl: 'url',      tagIds: ['tag-1', 'tag-2'],    });    expect(result).toEqual({      error: true,      status: 400,      message: 'Uma ou mais tags não foram encontradas',    });  });});