import { describe, it, expect, vi } from 'vitest';import { updateArticle } from '../../../function/article/update-articles';import { db } from '../../../db/client';vi.mock('../../../db/client', () => ({  db: {    user: {      findUnique: vi.fn(),    },    article: {      findUnique: vi.fn(),      update: vi.fn(),    },    tag: {      findMany: vi.fn(),    },    articleTags: {      createMany: vi.fn(),      deleteMany: vi.fn(),    },  },}));describe('updateArticle', () => {  it('should update an article successfully', async () => {    vi.mocked(db.user.findUnique).mockResolvedValue({ id: 'user-1', role: 'WRITER' });    vi.mocked(db.article.findUnique).mockResolvedValue(null);    vi.mocked(db.article.update).mockResolvedValue({ id: 'article-1', title: 'Updated Title' });    vi.mocked(db.article.findUnique).mockResolvedValue({ id: 'article-1', title: 'Updated Title', tags: [] });    const result = await updateArticle({      id: 'article-1',      title: 'Updated Title',      userId: 'user-1',    });    expect(result).toHaveProperty('title', 'Updated Title');  });  it('should return an error if user is not a WRITER', async () => {    vi.mocked(db.user.findUnique).mockResolvedValue({ id: 'user-1', role: 'READER' });    const result = await updateArticle({      id: 'article-1',      title: 'Updated Title',      userId: 'user-1',    });    expect(result).toEqual({      error: true,      status: 400,      message: 'O usuário precisa ser da função \'WRITER\' para escrever artigos',    });  });  it('should return an error if article title already exists for another article', async () => {    vi.mocked(db.user.findUnique).mockResolvedValue({ id: 'user-1', role: 'WRITER' });    vi.mocked(db.article.findUnique).mockResolvedValue({ id: 'article-2', title: 'Existing Title' });    const result = await updateArticle({      id: 'article-1',      title: 'Existing Title',      userId: 'user-1',    });    expect(result).toEqual({      error: true,      status: 400,      message: 'O artigo com o titulo: Existing Title já existe',    });  });});